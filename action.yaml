name: "Build and Push Image"
description: "Build and push a docker/oci image to a registry"

inputs:
  push-to-registry:
    description: "Push to registry.  Set to false if you want to only build the image and not push it."
    required: false
    default: "true"
  registry:
    description: 'Either "dockerhub" or "artifactory"'
    required: true
  image_name:
    description: "Name of the image"
    required: true
  image_tags:
    description: "Tags for the image (comma-separated)"
    required: true
  platforms:
    description: "Comma-separated list of platforms (e.g., linux/amd64,linux/arm64)"
    required: false
    default: "linux/amd64,linux/arm64"
  context:
    description: "Build's context is the set of files located in the specified PATH or URL"
    default: "."
    required: false
  dockerfile_path:
    description: "Path to Dockerfile"
    default: "Dockerfile"
    required: false
  setup-qemu:
    description: "Set up QEMU"
    default: "false"
    required: false
  cache_from:
    description: "List of external cache sources (e.g., type=local,src=path/to/dir)"
    default: type=gha
    required: false
  cache_to:
    description: "List of cache export destinations (e.g., type=local,dest=path/to/dir)"
    default: type=gha,mode=max
    required: false
  secrets:
    description: "List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)"
    required: false
    default: ""
  secret-envs:
    description: "List of secret env vars to expose to the build (e.g., key=envname, MY_SECRET=MY_ENV_VAR)"
    required: false
    default: ""
  secret-files:
    description: "List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)"
    required: false
    default: ""
  ulimit:
    description: "Ulimit options (e.g., nofile=1024:1024)"
    required: false
    default: ""
  build-args:
    description: "List of build-time variables"
    required: false
    default: ""
  ignore_trivy:
    description: "Ignore Trivy scan errors"
    required: false
    default: "false"
  run_trivy:
    description: "Run Trivy scan"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Setup environment
      shell: bash
      run: |
        if [[ "${{ inputs.registry }}" == "dockerhub" ]]; then
          export REGISTRY_URL="docker.io"
          export ATTESTATION_REGISTRY_URL="index.docker.io"
        elif [[ "${{ inputs.registry }}" == "artifactory" ]]; then
          export REGISTRY_URL="nethermind.jfrog.io"
          export ATTESTATION_REGISTRY_URL="nethermind.jfrog.io"
        else
          echo "Invalid registry. Choose 'dockerhub' or 'artifactory'"
          exit 1
        fi
        echo "REGISTRY_URL=${REGISTRY_URL}" >> $GITHUB_ENV
        echo "ATTESTATION_REGISTRY_URL=${ATTESTATION_REGISTRY_URL}" >> $GITHUB_ENV

        # Extra tags
        export GIT_TAGS=$(git describe --tags --always)

        # A single platform is needed for trivy and for the build-push action
        echo "PLATFORM=$(echo ${{ inputs.platforms }} | cut -d ',' -f 1)" >> $GITHUB_ENV

        # Create .trivyignore if it doesn't exist
        if [[ ! -f .trivyignore ]]; then
          echo "Creating .trivyignore file"
          touch .trivyignore
        fi

    - name: Set up QEMU
      if: ${{ inputs.setup-qemu == 'true' }}
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
      with:
        images: ${{ env.REGISTRY_URL }}/${{ inputs.image_name }}
        tags: |
          type=raw,value=latest
          type=raw,value={{commit_date 'YYYYMMDD'}}
          type=raw,value={{commit_date 'YYYYMMDD'}}-{{sha}}
          type=ref,event=branch
          type=raw,value=${{ github.ref_type == 'tag' && github.ref_name || '' }},enable=${{ github.ref_type == 'tag' }}
          type=sha
          type=sha,prefix=,format=long
          type=sha,prefix=,format=short
          ${{ inputs.image_tags != '' && format('type=raw,value={0}', inputs.image_tags) || '' }}
          type=raw,value=${{ env.GIT_TAGS }}

    - name: Build temporary image
      if: ${{ inputs.run_trivy == 'true' }}
      # The idea here is to first build the image without pushing it, so it can be
      # scanned by Trivy.
      # Also, since it's not going to be pushed, it MUST use a single platform
      # Ref: https://github.com/docker/buildx/issues/59
      # The usage of cache helps the next step when it builds again, but multi-arch
      id: build_temporary
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile_path }}
        platforms: ${{ env.PLATFORM }}
        tags: temporary-tag
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: ${{ inputs.cache_from }}
        cache-to: ${{ inputs.cache_to }}
        load: true
        push: false
        secrets: ${{ inputs.secrets }}
        secret-envs: ${{ inputs.secret-envs }}
        secret-files: ${{ inputs.secret-files }}
        ulimit: ${{ inputs.ulimit }}
        build-args: ${{ inputs.build-args }}

    - name: Run Trivy vulnerability scanner
      if: ${{ inputs.run_trivy == 'true' }}
      id: trivy
      uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4 # v0.32.0
      with:
        image-ref: ${{ steps.build_temporary.outputs.imageid }}
        format: "table"
        output: "trivy-results.txt"
        exit-code: ${{ inputs.ignore_trivy == 'true' && '0' || '1' }}
        ignore-unfixed: true
        severity: "CRITICAL,HIGH"
        trivyignores: ./.trivyignore
      env:
        TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db
        TRIVY_DISABLE_VEX_NOTICE: true

    - name: Build
      id: build
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile_path }}
        platforms: ${{ inputs.platforms }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: ${{ inputs.cache_from }}
        cache-to: ${{ inputs.cache_to }}
        load: false
        push: ${{ inputs.push-to-registry == 'true' }}
        secrets: ${{ inputs.secrets }}
        secret-envs: ${{ inputs.secret-envs }}
        secret-files: ${{ inputs.secret-files }}
        ulimit: ${{ inputs.ulimit }}
        build-args: ${{ inputs.build-args }}

    - name: Attest
      if: ${{ inputs.push-to-registry == 'true' }}
      uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
      id: attest
      with:
        subject-name: ${{ env.ATTESTATION_REGISTRY_URL }}/${{ inputs.image_name }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

    - name: Summary
      if: always()
      shell: bash
      run: |
        echo "### Build status" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Build and push successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Build failed" >> $GITHUB_STEP_SUMMARY
        fi

        echo "### Image Tags" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r TAG; do
          echo "- $TAG" >> $GITHUB_STEP_SUMMARY
        done
        echo '```' >> $GITHUB_STEP_SUMMARY

        echo "### Trivy Scan Output" >> $GITHUB_STEP_SUMMARY
        if [[ -f trivy-results.txt ]]; then
          cat trivy-results.txt
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          while IFS= read -r line; do
            if [[ $line == "┌"* ]]; then echo '```' >> $GITHUB_STEP_SUMMARY; fi
            echo "$line" >> $GITHUB_STEP_SUMMARY
            if [[ $line == *"┘" ]]; then echo '```' >> $GITHUB_STEP_SUMMARY; fi
          done < trivy-results.txt
          echo "</details>" >> $GITHUB_STEP_SUMMARY
        else
          echo "No Trivy report found." >> $GITHUB_STEP_SUMMARY
        fi
